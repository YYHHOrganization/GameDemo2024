#pragma kernel Kernel_Init
#pragma kernel Kernel_Diffusion
#pragma kernel Kernel_UserInput
#pragma kernel Kernel_Divergence
#pragma kernel Kernel_Jacobi
#pragma kernel Kernel_Advection
#pragma kernel Kernel_SubtractGradient
#pragma kernel Kernel_AddForce

float2 spherePos;
float2 sphereVelocity;
float forceIntensity;
float forceRange;
float _deltaTime;
float3 dyeColor;
float diffisionFactor;

float advectSpeed;
float vscosity;

Texture2D<float> ObstacleTex; //0 is obstacle, 1 is fluid
RWTexture2D<float2> VelocityTex;
RWTexture2D<float4> DensityTex; //r,g,b is dye color, a is density
RWTexture2D<float> PressureTex;
RWTexture2D<float> DivergenceTex;

Texture2D<float4> inputTex;

uint size; //texture resolution

//Neighbour pixel offsets: top,bottom,left,right
#define off_T int2(0,1);
#define off_B int2(0,-1);
#define off_L int2(-1,0);
#define off_R int2(1,0);

float3 BlendColor(float3 col1, float3 col2, float factor)
{
	float3 result = lerp(col1,col2,factor);
	return result;
}

//===========================================================
[numthreads(16,16,1)]
void Kernel_Init (uint3 id : SV_DispatchThreadid)
{
	//DensityTex[id.xy] = 0;
	DensityTex[id.xy] = inputTex[id.xy];
	VelocityTex[id.xy] = 0;
	PressureTex[id.xy] = 0;
	DivergenceTex[id.xy] = 0;
}


//===========================================================
[numthreads(16,16,1)]
void Kernel_Diffusion (uint3 Id : SV_DispatchThreadid)
{		
	//Grid positions
	int2 id = int2(Id.xy);
	int2 id_T = id + off_T;
	int2 id_B = id + off_B;
	int2 id_L = id + off_L;
	int2 id_R = id + off_R;
	
	//Obstacle
	float obstacle = ObstacleTex[id].x;
	float obstacle_T = ObstacleTex[id_T].x;
	float obstacle_R = ObstacleTex[id_R].x;
	float obstacle_B = ObstacleTex[id_B].x;
	float obstacle_L = ObstacleTex[id_L].x;
	
	//Density
	float4 d = DensityTex[id];
	float4 d_T = DensityTex[id_T] * obstacle_T;
	float4 d_B = DensityTex[id_B] * obstacle_R;
	float4 d_R = DensityTex[id_R] * obstacle_B;
	float4 d_L = DensityTex[id_L] * obstacle_L;
	// float4 d_T = DensityTex[id_T];
	// float4 d_B = DensityTex[id_B];
	// float4 d_R = DensityTex[id_R];
	// float4 d_L = DensityTex[id_L];
	
	//Diffusion
	//float4 dnew = (d + size * _deltaTime * (d_T + d_B + d_R + d_L)) / (1 + 4.0 * size * _deltaTime);
	float4 dnew = (d + size * _deltaTime * (d_T + d_B + d_R + d_L)) / (1 + 4.0 * diffisionFactor * _deltaTime);
	dnew *= obstacle;
	
	//Assign
	DensityTex[id] = dnew;
	// int2 id = int2(Id.xy);
	// int2 id_T = id + off_T;
	// int2 id_B = id + off_B;
	// int2 id_L = id + off_L;
	// int2 id_R = id + off_R;
	// float4 d = DensityTex[id];
	// float4 d_T = DensityTex[id_T];
	// float4 d_B = DensityTex[id_B];
	// float4 d_R = DensityTex[id_R];
	// float4 d_L = DensityTex[id_L];
	// float alpha = 1.0f + 4  * (size * vscosity * _deltaTime);
	// float beta = d + size * vscosity * _deltaTime * (d_L + d_R + d_T + d_B);
	// float4 dnew = beta / alpha;
	// DensityTex[id] = dnew;
}
//===========================================================
[numthreads(16,16,1)]
void Kernel_Advection (uint3 id : SV_DispatchThreadid)
{		
	float2 velocity = VelocityTex[id.xy].xy;
	float obstacle = ObstacleTex[id.xy].x;
	
	//Get previous id for Prev value -> current value
	float2 displacement = velocity * _deltaTime * size * 0.3f;
	int2 previd = round(float2(id.xy) - displacement);
	
	//Advect density
	float4 density = DensityTex[id.xy];
	float4 densityPrev = DensityTex[previd];
	density.a = 0.999f * densityPrev.a * obstacle;
	
	//Advect dye color，更多像是trick，差不多就行
	density.rgb = BlendColor(density.rgb, densityPrev.rgb, 0.8f);
	DensityTex[id.xy] = density;
	
	//Advect velocity，更多像是trick，差不多就行
	VelocityTex[id.xy] = 0.99f * VelocityTex[previd] * obstacle;

	// float2 velocity = VelocityTex[id.xy].xy;
	// float2 displacement = velocity * _deltaTime * advectSpeed;
	// int2 previd = round(float2(id.xy) - displacement);
	//
	// float4 density = DensityTex[id.xy];
	// float4 densityPrev = DensityTex[previd];
	// density.a = 0.999f * densityPrev.a;
	// density.rgb = BlendColor(density.rgb, densityPrev.rgb, 0.8f);
	// DensityTex[id.xy] = density;
	//
	// VelocityTex[id.xy] = VelocityTex[previd];
}

[numthreads(16, 16, 1)]
void Kernel_AddForce(uint3 id: SV_DispatchThreadID)
{
	float2 vel = VelocityTex[id.xy].xy;
	float2 pos = spherePos - float2(id.xy);
	vel += sphereVelocity * exp(-dot(pos, pos) / (forceRange * 0.001)) * _deltaTime * forceIntensity;
	VelocityTex[id.xy] = float2(vel);
}

//===========================================================
[numthreads(16,16,1)]
void Kernel_UserInput (uint3 id : SV_DispatchThreadid)
{
	//mouse position
	float2 center = 0.5;
	float2 uv = float2(id.xy) / float(size);
	float2 sphereUV = ( spherePos + center ); //sphere world position to 0-1 uv space

	float2 velocity = VelocityTex[id.xy].xy;
	float4 density = DensityTex[id.xy];
	float obstacle = ObstacleTex[id.xy].x; //障碍物贴图非障碍区域R为1，障碍区域R为0

	//Impulse factor
	float dist = distance(uv,sphereUV);
	dist = 1.0-smoothstep(dist, 0.0, forceRange);
	float impulse = forceIntensity * dist * _deltaTime * obstacle;

	//Add dye density
	float speed = distance(sphereVelocity,0);
	density.a += impulse * speed;

	//Add dye color
	density.rgb = BlendColor(density.rgb, dyeColor, impulse * speed);
	//density.rgb = DensityTex[id.xy];
	
	//Buoyancy, making the fluid goes out from center, instead of having gravity
	float2 cdir = uv - center;
	velocity += _deltaTime * density.a * cdir * 2.0; //本来项目这里是2.0，有需求的话再改一下

	//Add mouse velocity
	float2 dir = sphereVelocity;
	velocity += dir * impulse;

	//Assign
	VelocityTex[id.xy] = float2(velocity);
	DensityTex[id.xy] = density;
}
//===========================================================
[numthreads(16,16,1)]
void Kernel_Divergence (uint3 Id : SV_DispatchThreadid) //计算散度
{
	//Grid positions
	int2 id = int2(Id.xy);
	int2 id_T = id + off_T;
	int2 id_B = id + off_B;
	int2 id_L = id + off_L;
	int2 id_R = id + off_R;

	//Obstacle
	float obstacle_T = ObstacleTex[id_T].x;
	float obstacle_R = ObstacleTex[id_R].x;
	float obstacle_B = ObstacleTex[id_B].x;
	float obstacle_L = ObstacleTex[id_L].x;

	//Velocity
	float2 v_T = VelocityTex[id_T].xy * obstacle_T;
	float2 v_B = VelocityTex[id_B].xy * obstacle_R;
	float2 v_R = VelocityTex[id_R].xy * obstacle_B;
	float2 v_L = VelocityTex[id_L].xy * obstacle_L;
	
	//Divergence
	float halfPixelSize = ( 1.0/float(size) ) * 0.5;
	float div = halfPixelSize * (v_R.x - v_L.x + v_T.y - v_B.y);
	DivergenceTex[id.xy] = div;
}
//===========================================================
[numthreads(16,16,1)]
void Kernel_Jacobi (uint3 Id : SV_DispatchThreadid)
{
	//Grid positions
	int2 id = int2(Id.xy);
	int2 id_T = id + off_T;
	int2 id_B = id + off_B;
	int2 id_L = id + off_L;
	int2 id_R = id + off_R;

	//Obstacle
	float obstacle_T = ObstacleTex[id_T].x;
	float obstacle_R = ObstacleTex[id_R].x;
	float obstacle_B = ObstacleTex[id_B].x;
	float obstacle_L = ObstacleTex[id_L].x;

	//Pressure
	float p = PressureTex[id.xy].x;
	float p_T = lerp( p , PressureTex[id_T].x , obstacle_T ) ;
	float p_B = lerp( p , PressureTex[id_B].x , obstacle_R ) ;
	float p_R = lerp( p , PressureTex[id_R].x , obstacle_B ) ;
	float p_L = lerp( p , PressureTex[id_L].x , obstacle_L ) ;

	//New pressure
	float div = DivergenceTex[id.xy].x * size;
	p = (p_L + p_R + p_B + p_T - div ) / 4.0;
	PressureTex[id.xy] = p;
}
//===========================================================
[numthreads(16,16,1)]
void Kernel_SubtractGradient (uint3 Id : SV_DispatchThreadid)
{
	//Grid positions
	int2 id = int2(Id.xy);
	int2 id_T = id + off_T;
	int2 id_B = id + off_B;
	int2 id_L = id + off_L;
	int2 id_R = id + off_R;

	//Obstacle
	float obstacle_T = ObstacleTex[id_T].x;
	float obstacle_R = ObstacleTex[id_R].x;
	float obstacle_B = ObstacleTex[id_B].x;
	float obstacle_L = ObstacleTex[id_L].x;

	//Pressure
	float p = PressureTex[id.xy].x;
	float p_T = lerp( p , PressureTex[id_T].x , obstacle_T ) ;
	float p_B = lerp( p , PressureTex[id_B].x , obstacle_R ) ;
	float p_R = lerp( p , PressureTex[id_R].x , obstacle_B ) ;
	float p_L = lerp( p , PressureTex[id_L].x , obstacle_L ) ;

	//Pressure affect velocity, where the curl happens
	float2 velocity = VelocityTex[id.xy].xy;
	float curlSize = 1.0; // 0.2 - feels like thicker, 1.0 - more flowy
	float2 grad = float2(p_R - p_L, p_T - p_B) * curlSize;
	velocity -= grad;
	VelocityTex[id.xy] = float2(velocity); 
}



